// задача №4
// линейный односвязный список (очередь)


#include <iostream>


// в односвязном списке доступ к каждому элементу осуществляется через предыдущий
struct List
{
	int num;	// число num характеризует узел списка
	List* next; // указатель next будет хранить адрес следующего за последним элемента
};


int main()
{
	List* head = nullptr; // head указывает на начало списка. Изначально элементов в нем нет, поэтому указатель нулевой
	int n;				  // здесь хранится введённое число
	std::cout << "Enter elements of the List: \n";
	std::cin >> n;
	if (n)
	{
		head = new List;	  // динамическое выделение памяти для данного узла
		head->num = n;		  // заполнение узла целочисленным элементом
		head->next = nullptr; // указатель на следующий элемент, которого пока не существует, становится нулевым
	}
	else
	{
		std::cout << "The List is empty\n";
		return -1;
	}


	// tail указывает на конец списка
	// После ввода первого числа элемент только один, поэтому указатель на начало совпадает с указателем на конец
	List* tail = head;
	while (n)
	{
		std::cin >> n;
		if (n)
		{
			tail->next = new List; // выделение памяти для нового элемента
			tail = tail->next;	   // перенаправление указателя на последний элемент
			tail->num = n;		   // заполнение нового узла целочисленным элементом
			tail->next = nullptr;  // указатель на следующий элемент, которого пока не существует, становится нулевым
		}
	}


	// ввод произвольного числа для сравнения с элементами списка
	std::cout << "\nEnter some value: ";
	std::cin >> n;


	std::cout << "\nThe List:\n";
	int count = 0;
	while (head)
	{
		// вывод списка и количества вхождений заданного числа в данный список
		std::cout << head->num << " ";
		if (head->num == n)
			++count;

		// освобождение выделенной памяти
		tail = head;
		head = head->next;
		delete tail;
	}
	std::cout << "\n\nNumber " << n << " occurs: " << count << " times\n";
	return 0;
}